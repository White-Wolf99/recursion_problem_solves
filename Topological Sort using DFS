class Solution {
  public:
    void DFS(unordered_map<int, vector<int>> &adj, vector<bool> &visited, int u, stack<int> &st){
        visited[u] = true;
        
        for(int &v: adj[u]){
            if(!visited[v]){
                DFS(adj, visited, v, st);
            }
        }
        st.push(u);
        
    } 
    vector<int> topoSort(int V, vector<vector<int>>& edges) {
        // code here
        
        unordered_map<int, vector<int>> adj;
        for(int i = 0; i<edges.size(); i++){
            
            int a = edges[i][0];
            int b = edges[i][1];
            
            adj[a].push_back(b);
          
        }
        
        vector<bool> visited(V, false);
        stack<int> st;
        for(int i = 0; i<V; i++){
            if(!visited[i]){
                DFS(adj, visited, i, st);
            }
        }
        
        vector<int> res;
        while(!st.empty()){
            res.push_back(st.top());
            st.pop();
        }
        return res;
    }
};
