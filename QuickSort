class Solution {
  public:
    // Function to sort an array using quick sort algorithm.
    void quickSort(vector<int>& arr, int low, int high) {
        // code here
        if(low>=high){
            return;
        }
        //Storing the pivot
        int pi = partition(arr, low, high);
        // Again quicksort on the smaller elements of the pivot
        quickSort(arr, low, pi-1);
        //Again quicksort on the bigger elements of the pivot
        quickSort(arr, pi+1, high);
    }

  public:
    // Function that takes last element as pivot, places the pivot element at
    // its correct position in sorted array, and places all smaller elements
    // to left of pivot and all greater elements to right of pivot.
    int partition(vector<int>& arr, int low, int high) {
        // code here
        int pivot = arr[high];
        int pi = low;
        int i;
        for(i = low; i<high; i++){
            if(arr[i] <= pivot){
                swap(arr[i], arr[pi]);
                pi++;
            }
        }
        swap(arr[i], arr[pi]); //Swapping the pivot with the element which is in 'pi' index
        return pi;
    }
};
